/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace NodeHealthMonitor {
  export type NodeStatusStruct = {
    reporter: AddressLike;
    timestamp: BigNumberish;
    statusHash: BytesLike;
    severity: BigNumberish;
    optionalDetails: string;
  };

  export type NodeStatusStructOutput = [
    reporter: string,
    timestamp: bigint,
    statusHash: string,
    severity: bigint,
    optionalDetails: string
  ] & {
    reporter: string;
    timestamp: bigint;
    statusHash: string;
    severity: bigint;
    optionalDetails: string;
  };
}

export interface NodeHealthMonitorInterface extends Interface {
  getFunction(
    nameOrSignature: "getLatestStatus" | "reportStatus" | "statusReports"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CriticalAlert" | "StatusReported"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getLatestStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportStatus",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "statusReports",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLatestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "statusReports",
    data: BytesLike
  ): Result;
}

export namespace CriticalAlertEvent {
  export type InputTuple = [
    node: AddressLike,
    details: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [node: string, details: string, timestamp: bigint];
  export interface OutputObject {
    node: string;
    details: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StatusReportedEvent {
  export type InputTuple = [
    node: AddressLike,
    severity: BigNumberish,
    statusHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    severity: bigint,
    statusHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    severity: bigint;
    statusHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NodeHealthMonitor extends BaseContract {
  connect(runner?: ContractRunner | null): NodeHealthMonitor;
  waitForDeployment(): Promise<this>;

  interface: NodeHealthMonitorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLatestStatus: TypedContractMethod<
    [node: AddressLike],
    [NodeHealthMonitor.NodeStatusStructOutput],
    "view"
  >;

  reportStatus: TypedContractMethod<
    [severity: BigNumberish, statusHash: BytesLike, optionalDetails: string],
    [void],
    "nonpayable"
  >;

  statusReports: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string, bigint, string] & {
        reporter: string;
        timestamp: bigint;
        statusHash: string;
        severity: bigint;
        optionalDetails: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLatestStatus"
  ): TypedContractMethod<
    [node: AddressLike],
    [NodeHealthMonitor.NodeStatusStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "reportStatus"
  ): TypedContractMethod<
    [severity: BigNumberish, statusHash: BytesLike, optionalDetails: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "statusReports"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string, bigint, string] & {
        reporter: string;
        timestamp: bigint;
        statusHash: string;
        severity: bigint;
        optionalDetails: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CriticalAlert"
  ): TypedContractEvent<
    CriticalAlertEvent.InputTuple,
    CriticalAlertEvent.OutputTuple,
    CriticalAlertEvent.OutputObject
  >;
  getEvent(
    key: "StatusReported"
  ): TypedContractEvent<
    StatusReportedEvent.InputTuple,
    StatusReportedEvent.OutputTuple,
    StatusReportedEvent.OutputObject
  >;

  filters: {
    "CriticalAlert(address,string,uint256)": TypedContractEvent<
      CriticalAlertEvent.InputTuple,
      CriticalAlertEvent.OutputTuple,
      CriticalAlertEvent.OutputObject
    >;
    CriticalAlert: TypedContractEvent<
      CriticalAlertEvent.InputTuple,
      CriticalAlertEvent.OutputTuple,
      CriticalAlertEvent.OutputObject
    >;

    "StatusReported(address,uint8,bytes32,uint256)": TypedContractEvent<
      StatusReportedEvent.InputTuple,
      StatusReportedEvent.OutputTuple,
      StatusReportedEvent.OutputObject
    >;
    StatusReported: TypedContractEvent<
      StatusReportedEvent.InputTuple,
      StatusReportedEvent.OutputTuple,
      StatusReportedEvent.OutputObject
    >;
  };
}
